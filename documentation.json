{
    "pipes": [],
    "interfaces": [
        {
            "name": "Icon",
            "id": "interface-Icon-e855aba5de68eb041767e0c214e39df8aa73f4763e1fad68ad982f7ebaab556d7f6e77ac9766981fc35e8cda8b8e165e5bdb88e2c02c31996263ff7b9f00fad8",
            "file": "projects/relative/src/lib/components/inputs/input-alter/input-alter.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\ninterface Icon {\r\n  src: string;\r\n  alt: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'rlv-input-alter',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputAlterComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n  templateUrl: './input-alter.component.html',\r\n  styleUrls: ['./input-alter.component.css'],\r\n})\r\nexport class InputAlterComponent {\r\n  @Input() disabled: boolean = false;\r\n  @Input() placeholder: string = 'Search';\r\n  @Input() value: string = '';\r\n  @Input() hasError: string = '';\r\n  @Input() width: string;\r\n  @Input() icon: Icon;\r\n  @Output() valueChange: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  isFocused: boolean;\r\n  isSelectOpen: boolean;\r\n\r\n  ngOnInit(): void {}\r\n\r\n  setFocus(): void {\r\n    this.isFocused = !this.isFocused;\r\n  }\r\n\r\n  openCloseSelect(): void {\r\n    if (this.disabled) return;\r\n    this.isSelectOpen = !this.isSelectOpen;\r\n  }\r\n\r\n  onInputChange(event?: Event): void {\r\n    if (event) {\r\n      const inputElement = event.target as HTMLInputElement;\r\n      this.value = inputElement.value;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IOptions",
            "id": "interface-IOptions-1e016d5ca6fc29c5e992047b561b8117d4709ea794b483440b93c4b735ba447c60a0b0c90299818b65dadab1e0e09f1175a88bc0a3d3fd623410f4bf3034285b",
            "file": "projects/relative/src/lib/components/card/card.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ElementRef,\r\n  Input, ViewChild\r\n} from '@angular/core';\r\nimport { ClickPressureDirective } from '@relative/lib/directives/clickPressure.directive';\r\n\r\ninterface IOptions {\r\n  width?: number | string;\r\n  color?: string;\r\n  backgroundColor?: string;\r\n  boxShadowColor?: string;\r\n  clickable?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'rlv-card',\r\n  standalone: true,\r\n  imports: [CommonModule, ClickPressureDirective],\r\n  templateUrl: './card.component.html',\r\n  styleUrl: './card.component.css',\r\n})\r\nexport class CardComponent {\r\n  @ViewChild('cardElement', { static: true }) cardElement!: ElementRef;\r\n  @Input() options: IOptions;\r\n  @Input() link: string;\r\n\r\n  clickPressColor: string = '#8B8B8B';\r\n\r\n  relocation() {\r\n    if (this.options.clickable && this.link) {\r\n      location.href = this.link;\r\n    }\r\n  }\r\n\r\n  get styles() {\r\n    return {\r\n      width: this.options.width,\r\n      color: this.options.color,\r\n      'background-color': this.options.backgroundColor,\r\n      'box-shadow': '0 2px 4px 2px ' + this.options.boxShadowColor,\r\n    };\r\n  }\r\n\r\n  get classes() {\r\n    return {\r\n      clickable: this.options.clickable,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "boxShadowColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "clickable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ModalOptions",
            "id": "interface-ModalOptions-17a6c72232249d6f29251497e92f89ab934fe9405ef4bdd7591dd0e787a711e208c422de9e28fed1fd83c4e5586f3a53e211550ff12d6131d3bd440f9d34ba00",
            "file": "projects/relative/src/lib/components/modal/interfaces/modal-options.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ModalOptions {\r\n  width?: string;\r\n  height?: string;\r\n  backgroundColor?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "RLVModalService",
            "id": "injectable-RLVModalService-a0ba14494d88f75b98f7dd776e6f6e8dfb7bb81f710acb2ce1cff2de64205f801b0c43e438c55b0a0b8967385848711df39d51e1289b595a1d84c85f9b2587a6",
            "file": "projects/relative/src/lib/services/modal.service.ts",
            "properties": [
                {
                    "name": "modalRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<ModalComponent> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "dynamicComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "ModalOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dynamicComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ModalOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, ComponentRef, Injector, ApplicationRef } from '@angular/core';\r\nimport { ModalComponent } from '../components/modal/modal.component';\r\nimport { ModalOptions } from '../components/modal/interfaces/modal-options.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RLVModalService {\r\n  private modalRef: ComponentRef<ModalComponent> | null = null;\r\n\r\n  constructor(\r\n    private appRef: ApplicationRef,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  openModal( dynamicComponent?: any, options: ModalOptions = {}): void {\r\n    if (this.modalRef) {\r\n      this.closeModal(); // Cierra el modal existente si hay uno abierto\r\n    }\r\n\r\n    // Crear el componente del modal dinámicamente\r\n    const modalComponent = ModalComponent;\r\n    this.modalRef = this.appRef.bootstrap(modalComponent, { injector: this.injector });\r\n\r\n    // Pasar las opciones y el componente dinámico al modal\r\n    this.modalRef.instance.options = options;\r\n    this.modalRef.instance.dynamicComponent = dynamicComponent;\r\n\r\n    // Suscribirse al evento close\r\n    this.modalRef.instance.close.subscribe(() => this.closeModal());\r\n\r\n    // Insertar el modal en el DOM (body)\r\n    const domElem = (this.modalRef.hostView as any).rootNodes[0] as HTMLElement;\r\n    document.body.appendChild(domElem);\r\n  }\r\n\r\n  closeModal(): void {\r\n    if (this.modalRef) {\r\n      this.appRef.detachView(this.modalRef.hostView);\r\n      this.modalRef.destroy();\r\n      this.modalRef = null;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "ClickPressureDirective",
            "id": "directive-ClickPressureDirective-12aeb67952dfca58cd4953c614f2ebc23fcbe00f68eda1917df89b260bbfb5348b9f3cdb332722348651dcb55c0436b3ce8a6f51ad5a8eda96add7a122a696b5",
            "file": "projects/relative/src/lib/directives/clickPressure.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[clickPressure]',\r\n  standalone: true,\r\n})\r\nexport class ClickPressureDirective {\r\n  @Input() actived: boolean = true;\r\n  @Input() theme: string = '#ffffff';\r\n  @Input() intensity: number = 10;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\r\n\r\n  @HostListener('click', ['$event'])\r\n  mouseClick(event: MouseEvent): void {\r\n    if (this.actived === false) return;\r\n\r\n    const { clientX, clientY } = event;\r\n    this.createWave(clientX, clientY);\r\n    this.applyPressEffect(clientX, clientY);\r\n  }\r\n\r\n  private createWave(x: number, y: number): void {\r\n    // Crear el elemento para la onda\r\n    const wave = this.renderer.createElement('span');\r\n    this.renderer.addClass(wave, 'mouse-wave');\r\n\r\n    // Posicionar la onda en el lugar del ratón\r\n    this.renderer.setStyle(wave, 'left', `${x}px`);\r\n    this.renderer.setStyle(wave, 'top', `${y}px`);\r\n    this.renderer.setStyle(wave, 'background-color', `${this.theme}4d`);\r\n\r\n    // Añadir la onda al contenedor principal\r\n    this.renderer.appendChild(this.el.nativeElement, wave);\r\n\r\n    setTimeout(() => {\r\n      this.renderer.removeChild(this.el.nativeElement, wave);\r\n    }, 1000);\r\n  }\r\n\r\n  private applyPressEffect(x: number, y: number): void {\r\n    const rect = this.el.nativeElement.getBoundingClientRect();\r\n\r\n    // Calcular la posición relativa del clic dentro del elemento\r\n    const xPosition = x - rect.left - rect.width / 2; // Posición relativa al centro\r\n    const yPosition = y - rect.top - rect.height / 2; // Posición relativa al centro\r\n\r\n    // Ajustar la intensidad de la inclinación\r\n    const rotateX = (yPosition * this.intensity) / rect.height;\r\n    const rotateY = -(xPosition * this.intensity) / rect.width;\r\n\r\n    // Aplicar la transformación 3D\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'transform',\r\n      `perspective(500px) rotateX(${-rotateX}deg) rotateY(${-rotateY}deg) scale(0.98)`\r\n    );\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'transition',\r\n      'transform 0.1s ease-out'\r\n    );\r\n\r\n    setTimeout(() => {\r\n      // Restaurar el estilo original\r\n      this.renderer.setStyle(\r\n        this.el.nativeElement,\r\n        'transform',\r\n        `perspective(500px) rotateX(0) rotateY(0) scale(1)`\r\n      );\r\n      this.renderer.setStyle(\r\n        this.el.nativeElement,\r\n        'transition',\r\n        'transform 0.3s ease-out'\r\n      );\r\n    }, 200);\r\n  }\r\n}\r\n",
            "selector": "[clickPressure]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "actived",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "intensity",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "defaultValue": "'#ffffff'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "applyPressEffect",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createWave",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "BrandedButtonComponent",
            "id": "component-BrandedButtonComponent-c8e7900ae1a3a8da555b260393267e49eacb469ea9f995d0df4f7b9f4ab522c3cef6200f0ca6e37d595205d36949534495a9fc2bc0b9d794427b4081cd6e68ef",
            "file": "projects/relative/src/lib/components/buttons/branded-button/branded-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rlv-branded-button",
            "styleUrls": [
                "./branded-button.css"
            ],
            "styles": [],
            "templateUrl": [
                "./branded-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'#3E8989'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "backgroundHover",
                    "defaultValue": "'black'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonMinWidth",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "buttonRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'buttonText'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isHovered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ClickPressureDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  AfterViewInit,\r\n  ElementRef,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { ClickPressureDirective } from '@relative/public-api';\r\n\r\n@Component({\r\n  selector: 'rlv-branded-button',\r\n  standalone: true,\r\n  imports: [CommonModule, ClickPressureDirective],\r\n  templateUrl: './branded-button.component.html',\r\n  styleUrls: ['./branded-button.css'],\r\n})\r\nexport class BrandedButtonComponent implements AfterViewInit {\r\n  @ViewChild('buttonText') buttonRef!: ElementRef<HTMLDivElement>;\r\n  buttonMinWidth: string = '';\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      if (this.buttonRef) {\r\n        this.buttonMinWidth = `${this.buttonRef.nativeElement.offsetWidth + this.extraPaddingWidth}px`;\r\n      }\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  type = 'primary';\r\n\r\n  @Input()\r\n  backgroundColor: string = '#3E8989';\r\n\r\n  @Input()\r\n  backgroundHover: string = 'black';\r\n\r\n  @Input()\r\n  color: string = 'white';\r\n\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  isHovered = false;\r\n\r\n  get classes(): string[] {\r\n    return [\r\n      'rlv-branded-button',\r\n      `rlv-branded-button--${this.size}`,\r\n    ];\r\n  }\r\n\r\n  get extraPaddingWidth(): number {\r\n    let width = 40;\r\n\r\n    switch (this.size) {\r\n      case 'small':\r\n      case 'medium':\r\n      default:\r\n        width = 40;\r\n        break;\r\n      case 'large':\r\n        width = 48;\r\n    }\r\n    return width;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"projects/relative/src/assets/base.css\";\r\n\r\n.rlv-branded-button {\r\n  box-shadow: 0px 0px 0px 1px #3e898933;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 8px;\r\n  position: relative;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  border: 0;\r\n  border-radius: 7.5px;\r\n  line-height: 1;\r\n}\r\n\r\n.rlv-branded-button--small {\r\n  height: 32px;\r\n  padding: 0 20px;\r\n}\r\n.rlv-branded-button--medium {\r\n  height: 40px;\r\n  padding: 0 20px;\r\n}\r\n.rlv-branded-button--large {\r\n  height: 48px;\r\n  padding: 0 24px;\r\n}\r\n",
                    "styleUrl": "./branded-button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 55
                    }
                },
                "extraPaddingWidth": {
                    "name": "extraPaddingWidth",
                    "getSignature": {
                        "name": "extraPaddingWidth",
                        "type": "number",
                        "returnType": "number",
                        "line": 62
                    }
                }
            },
            "templateData": "<button\r\n  clickPressure\r\n  [intensity]=\"25\"\r\n  (click)=\"onClick.emit($event)\"\r\n  [ngClass]=\"classes\"\r\n  [ngStyle]=\"{\r\n    'background-color': isHovered ? backgroundHover : backgroundColor,\r\n    color: color,\r\n    'min-width': buttonMinWidth\r\n  }\"\r\n  (mouseenter)=\"isHovered = true\"\r\n  (mouseleave)=\"isHovered = false\"\r\n>\r\n  <div #buttonText>{{ label }}</div>\r\n</button>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-1e016d5ca6fc29c5e992047b561b8117d4709ea794b483440b93c4b735ba447c60a0b0c90299818b65dadab1e0e09f1175a88bc0a3d3fd623410f4bf3034285b",
            "file": "projects/relative/src/lib/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rlv-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IOptions",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cardElement', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "clickPressColor",
                    "defaultValue": "'#8B8B8B'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "relocation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ClickPressureDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  ElementRef,\r\n  Input, ViewChild\r\n} from '@angular/core';\r\nimport { ClickPressureDirective } from '@relative/lib/directives/clickPressure.directive';\r\n\r\ninterface IOptions {\r\n  width?: number | string;\r\n  color?: string;\r\n  backgroundColor?: string;\r\n  boxShadowColor?: string;\r\n  clickable?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'rlv-card',\r\n  standalone: true,\r\n  imports: [CommonModule, ClickPressureDirective],\r\n  templateUrl: './card.component.html',\r\n  styleUrl: './card.component.css',\r\n})\r\nexport class CardComponent {\r\n  @ViewChild('cardElement', { static: true }) cardElement!: ElementRef;\r\n  @Input() options: IOptions;\r\n  @Input() link: string;\r\n\r\n  clickPressColor: string = '#8B8B8B';\r\n\r\n  relocation() {\r\n    if (this.options.clickable && this.link) {\r\n      location.href = this.link;\r\n    }\r\n  }\r\n\r\n  get styles() {\r\n    return {\r\n      width: this.options.width,\r\n      color: this.options.color,\r\n      'background-color': this.options.backgroundColor,\r\n      'box-shadow': '0 2px 4px 2px ' + this.options.boxShadowColor,\r\n    };\r\n  }\r\n\r\n  get classes() {\r\n    return {\r\n      clickable: this.options.clickable,\r\n    };\r\n  }\r\n}\r\n",
            "styleUrl": "./card.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                }
            },
            "templateData": "<div\r\n  clickPressure\r\n  [theme]=\"clickPressColor\"\r\n  [intensity]=\"8\"\r\n  [actived]=\"options.clickable ?? true\"\r\n  (click)=\"relocation()\"\r\n  [ngStyle]=\"styles\"\r\n  [ngClass]=\"classes\"\r\n  class=\"card\"\r\n>\r\n  <div class=\"card-header\">\r\n    <ng-content select=\"[header]\"></ng-content>\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <ng-content select=\"[content]\"></ng-content>\r\n  </div>\r\n  <div class=\"card-footer\">\r\n    <ng-content select=\"[footer]\"></ng-content>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "ColorPaletteComponent",
            "id": "component-ColorPaletteComponent-5ac9bb040af3fee80fe8d15f9dce27d19879a9d5dd351bd69e8d965898e29397b68808c9e1747fc8f6c119691fd56cbfbceaf822049e04f20e02a1077e80a5e0",
            "file": "src/stories/design-system/color-pallete/color-pallete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rlv-color-palette",
            "styleUrls": [
                "./color-pallete.css"
            ],
            "styles": [],
            "templateUrl": [
                "./color-pallete.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "baseColors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "hoverColors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "literal type[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "activeRow",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "copyHex",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showAlert",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'rlv-color-palette',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './color-pallete.component.html',\r\n  styleUrls: ['./color-pallete.css'],\r\n})\r\nexport class ColorPaletteComponent {\r\n  @Input() baseColors: { name: string; hex: string }[] = [];\r\n  \r\n  @Input() hoverColors: { name: string; hex: string }[] = [];\r\n\r\n  activeRow: number | null = null;\r\n  \r\n  activeColor: string | null = null;\r\n\r\n  copyHex(color: string, index: number): void {\r\n    if(this.activeRow !== null) return\r\n    navigator.clipboard\r\n      .writeText(color)\r\n      .then(() => {\r\n        this.showAlert(index, color);\r\n      })\r\n      .catch((err) => {\r\n        alert(`Error al copiar al portapapeles: ${err}`);\r\n      });\r\n  }\r\n\r\n  showAlert(index: number, color: string): void {\r\n    this.activeRow = index;\r\n    this.activeColor = color;\r\n\r\n    setTimeout(() => {\r\n      this.activeRow = null;\r\n    }, 1000);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".color-table {\r\n  justify-self: center;\r\n  width: 60%;\r\n  border-collapse: collapse;\r\n  margin-top: 50px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.color-table th,\r\n.color-table td {\r\n  padding: 12px 15px;\r\n  text-align: left;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n\r\n.color-table td {\r\n  width: 300px;\r\n}\r\n\r\n.color-table th {\r\n  background-color: #f5f5f5;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n  border-bottom: 2px solid #e0e0e0;\r\n}\r\n\r\n.color-table tr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.color-table tr:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.color-row {\r\n  position: relative;\r\n  cursor: pointer;\r\n  align-items: center;\r\n}\r\n\r\n.color-box {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.color-table td {\r\n  font-family: \"Courier New\", Courier, monospace;\r\n  color: #777;\r\n}\r\n\r\n.color-table:last-child {\r\n  margin-bottom: 100px;\r\n}\r\n\r\n.badger-alert{\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: absolute;\r\n  transform: translateX(-14px);\r\n  opacity: 0;\r\n  width: 80px;\r\n  height: 40px;\r\n  color: white;\r\n  border-radius: 12px;\r\n  background-color: #333333;\r\n  margin: 12px 0 0 15px;\r\n  transition: opacity 0.2s, transform 0.2s;\r\n  \r\n  &.show{\r\n    opacity: .4;\r\n    transform: translateX(0px);\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-pallete.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h1>Paleta de Colores</h1>\r\n<p>\r\n  A continuación, se muestran los colores utilizados en el sistema de diseño:\r\n</p>\r\n<h2>Colores Base</h2>\r\n<table class=\"color-table\">\r\n  <thead>\r\n    <tr>\r\n      <th>Nombre</th>\r\n      <th>Color</th>\r\n      <th>Hex</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    @for (color of baseColors; track $index) {\r\n      <tr class=\"color-row\" (click)=\"copyHex(color.hex, $index)\">\r\n        <td>{{ color.name }}</td>\r\n        <td><div [style.background]=\"color.hex\" class=\"color-box\"></div></td>\r\n        <td>{{ color.hex }}</td>\r\n        <div [ngClass]=\"{ show: activeRow === $index && activeColor === color.hex }\" class=\"badger-alert\">Copied!</div>\r\n      </tr>\r\n    }\r\n  </tbody>\r\n</table>\r\n\r\n<h2>Colores Hover</h2>\r\n<table class=\"color-table\">\r\n  <thead>\r\n    <tr>\r\n      <th>Nombre</th>\r\n      <th>Color</th>\r\n      <th>Hex</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    @for (color of hoverColors; track $index) {\r\n      <tr class=\"color-row\" (click)=\"copyHex(color.hex, $index)\">\r\n        <td>{{ color.name }}</td>\r\n        <td><div [style.background]=\"color.hex\" class=\"color-box\"></div></td>\r\n        <td>{{ color.hex }}</td>\r\n        <div [ngClass]=\"{ show: activeRow === $index && activeColor === color.hex}\" class=\"badger-alert\">Copied!</div>\r\n      </tr>\r\n    }\r\n  </tbody>\r\n</table>\r\n"
        },
        {
            "name": "CTAButtonComponent",
            "id": "component-CTAButtonComponent-664e3077aeb4898dccba9823c00f7f5747a6ce5306b1a37756de44fef84307e2648c68082cb85c6eb88b6adeaa5ea25ffa913e3e9ae56a28ee5e8bcafb3b8df3",
            "file": "projects/relative/src/lib/components/buttons/cta-button/cta-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rlv-cta-button",
            "styleUrls": [
                "./cta-button.css"
            ],
            "styles": [],
            "templateUrl": [
                "./cta-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "{\r\n    src: '',\r\n    alt: '',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonMinWidth",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "buttonRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'buttonText'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ClickPressureDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport { ClickPressureDirective } from '@relative/lib/directives/clickPressure.directive';\r\n\r\n@Component({\r\n  selector: 'rlv-cta-button',\r\n  standalone: true,\r\n  imports: [CommonModule, ClickPressureDirective],\r\n  templateUrl: './cta-button.component.html',\r\n  styleUrls: ['./cta-button.css'],\r\n})\r\nexport class CTAButtonComponent {\r\n  @ViewChild('buttonText') buttonRef!: ElementRef<HTMLDivElement>;\r\n  buttonMinWidth: string = '';\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      if (this.buttonRef) {\r\n        this.buttonMinWidth = `${\r\n          this.buttonRef.nativeElement.offsetWidth + this.extraPaddingWidth\r\n        }px`;\r\n      }\r\n    });\r\n  }\r\n\r\n  @Input()\r\n  type = 'primary';\r\n\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  @Input()\r\n  loading = false;\r\n\r\n  @Input()\r\n  fullWidth = false;\r\n\r\n  @Input()\r\n  disabled = false;\r\n\r\n  @Input()\r\n  icon: { src: string; alt: string } = {\r\n    src: '',\r\n    alt: '',\r\n  };\r\n\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  get classes(): string[] {\r\n    const width: string | null = this.fullWidth ? 'full' : '';\r\n    const disabled: string | null = this.disabled ? 'disabled' : '';\r\n\r\n    return [\r\n      'rlv-cta-button',\r\n      `rlv-cta-button--${this.size}`,\r\n      `rlv-cta-button--${this.type}`,\r\n      width,\r\n      disabled,\r\n    ];\r\n  }\r\n\r\n  get extraPaddingWidth(): number {\r\n    let width = 40;\r\n\r\n    switch (this.size) {\r\n      case 'small':\r\n      case 'medium':\r\n      default:\r\n        width = 40;\r\n        break;\r\n      case 'large':\r\n        width = 48;\r\n    }\r\n    return width;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"projects/relative/src/assets/base.css\";\r\n\r\n.rlv-cta-button {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  border: 0;\r\n  border-radius: 7.5px;\r\n  line-height: 1;\r\n  div {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n}\r\n.rlv-cta-button--primary {\r\n  box-shadow: 0px 0px 0px 1px #3e898933;\r\n  outline: none;\r\n  background-color: #3e8989;\r\n  color: white;\r\n  &:hover {\r\n    background-color: #316d6d;\r\n  }\r\n\r\n  &.disabled {\r\n    background-color: #a0a0a0;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  .icon-button {\r\n    filter: brightness(0) saturate(100%) invert(100%) sepia(100%) saturate(0%);\r\n  }\r\n}\r\n.rlv-cta-button--secondary {\r\n  box-shadow: #3e8989 0px 0px 0px 1px inset;\r\n  background-color: transparent;\r\n  color: #3e8989;\r\n  &:hover {\r\n    background-color: #3e898941;\r\n  }\r\n\r\n  &.disabled {\r\n    box-shadow: #a0a0a0 0px 0px 0px 1px inset;\r\n    background-color: transparent;\r\n    cursor: not-allowed;\r\n    color: #a0a0a0;\r\n  }\r\n\r\n  .icon-button {\r\n    filter: brightness(0) saturate(100%) invert(57%) sepia(5%) saturate(3464%);\r\n  }\r\n}\r\n.rlv-cta-button--tertiary {\r\n  box-shadow: #616161 0px 0px 0px 1px inset;\r\n  background-color: transparent;\r\n  color: #616161;\r\n  &:hover {\r\n    background-color: #61616141;\r\n  }\r\n\r\n  &.disabled {\r\n    box-shadow: #a0a0a0 0px 0px 0px 1px inset;\r\n    background-color: transparent;\r\n    cursor: not-allowed;\r\n    color: #a0a0a0;\r\n  }\r\n\r\n  .icon-button {\r\n    filter: brightness(0) saturate(100%) invert(38%) sepia(0%) saturate(1%);\r\n  }\r\n}\r\n.rlv-cta-button--raw {\r\n  background-color: transparent;\r\n  color: #616161;\r\n  &:hover {\r\n    color: #313131;\r\n    .icon-button {\r\n      filter: brightness(0) saturate(100%) invert(14%) sepia(37%) saturate(12%);\r\n    }\r\n  }\r\n\r\n  &.disabled {\r\n    cursor: not-allowed;\r\n    color: #a0a0a0;\r\n  }\r\n\r\n  .icon-button {\r\n    filter: brightness(0) saturate(100%) invert(38%) sepia(0%) saturate(1%);\r\n  }\r\n}\r\n.rlv-cta-button--primary--danger {\r\n  box-shadow: 0px 0px 0px 1px #e5393533;\r\n  background-color: #e53935;\r\n  color: white;\r\n  &:hover {\r\n    background-color: #b82e2b;\r\n  }\r\n\r\n  .icon-button {\r\n    filter: brightness(0) saturate(100%) invert(100%) sepia(100%) saturate(0%);\r\n  }\r\n}\r\n.rlv-cta-button--secondary--danger {\r\n  box-shadow: #e53935 0px 0px 0px 1px inset;\r\n  background-color: transparent;\r\n  color: #e53935;\r\n  &:hover {\r\n    background-color: #e5393541;\r\n  }\r\n\r\n  .icon-button {\r\n    filter: brightness(0) saturate(100%) invert(34%) sepia(74%) saturate(2141%);\r\n  }\r\n}\r\n.rlv-cta-button--raw--danger {\r\n  background-color: transparent;\r\n  color: #e53935;\r\n  &:hover {\r\n    color: #b82e2b;\r\n    .icon-button {\r\n      filter: brightness(0) saturate(100%) invert(46%) sepia(95%);\r\n    }\r\n  }\r\n\r\n  .icon-button {\r\n    filter: brightness(0) saturate(100%) invert(34%) sepia(74%) saturate(2141%);\r\n  }\r\n}\r\n.rlv-cta-button--small {\r\n  height: 32px;\r\n  padding: 0 20px;\r\n}\r\n.rlv-cta-button--medium {\r\n  height: 40px;\r\n  padding: 0 20px;\r\n}\r\n.rlv-cta-button--large {\r\n  height: 48px;\r\n  padding: 0 24px;\r\n}\r\n\r\n.full {\r\n  width: 100%;\r\n}\r\n\r\n.icon-button {\r\n  width: 24px;\r\n  height: 24px;\r\n}\r\n\r\n.loader {\r\n  justify-self: center;\r\n  width: 1em;\r\n  height: 1em;\r\n  animation: spin 1s linear infinite;\r\n  border: 0.15em solid #616161;\r\n  border-top: 0.15em solid #61616166;\r\n  border-radius: 50%;\r\n}\r\n\r\n@keyframes spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n",
                    "styleUrl": "./cta-button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 63
                    }
                },
                "extraPaddingWidth": {
                    "name": "extraPaddingWidth",
                    "getSignature": {
                        "name": "extraPaddingWidth",
                        "type": "number",
                        "returnType": "number",
                        "line": 76
                    }
                }
            },
            "templateData": "<button\r\n  clickPressure\r\n  [intensity]=\"25\"\r\n  [disabled]=\"disabled\"\r\n  (click)=\"onClick.emit($event)\"\r\n  [ngClass]=\"classes\"\r\n  [ngStyle]=\"{ 'min-width': buttonMinWidth }\"\r\n>\r\n  @if (loading) {\r\n  <div class=\"loader\"></div>\r\n  } @else {\r\n  <div #buttonText>\r\n    @if(icon.src){\r\n    <img [src]=\"icon.src\" [alt]=\"icon.alt\" class=\"icon-button\" />\r\n    }\r\n    {{ label }}\r\n  </div>\r\n  }\r\n</button>\r\n"
        },
        {
            "name": "InputAlterComponent",
            "id": "component-InputAlterComponent-e855aba5de68eb041767e0c214e39df8aa73f4763e1fad68ad982f7ebaab556d7f6e77ac9766981fc35e8cda8b8e165e5bdb88e2c02c31996263ff7b9f00fad8",
            "file": "projects/relative/src/lib/components/inputs/input-alter/input-alter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputAlterComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "rlv-input-alter",
            "styleUrls": [
                "./input-alter.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input-alter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "Icon",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isFocused",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isSelectOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCloseSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\ninterface Icon {\r\n  src: string;\r\n  alt: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'rlv-input-alter',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputAlterComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n  templateUrl: './input-alter.component.html',\r\n  styleUrls: ['./input-alter.component.css'],\r\n})\r\nexport class InputAlterComponent {\r\n  @Input() disabled: boolean = false;\r\n  @Input() placeholder: string = 'Search';\r\n  @Input() value: string = '';\r\n  @Input() hasError: string = '';\r\n  @Input() width: string;\r\n  @Input() icon: Icon;\r\n  @Output() valueChange: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  isFocused: boolean;\r\n  isSelectOpen: boolean;\r\n\r\n  ngOnInit(): void {}\r\n\r\n  setFocus(): void {\r\n    this.isFocused = !this.isFocused;\r\n  }\r\n\r\n  openCloseSelect(): void {\r\n    if (this.disabled) return;\r\n    this.isSelectOpen = !this.isSelectOpen;\r\n  }\r\n\r\n  onInputChange(event?: Event): void {\r\n    if (event) {\r\n      const inputElement = event.target as HTMLInputElement;\r\n      this.value = inputElement.value;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input-container {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.input-text-container {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  min-width: 400px;\r\n  height: 50px;\r\n  padding: 0 0 0 8px;\r\n  margin-top: 30px;\r\n  border-radius: 8px 50px 50px 8px;\r\n  background-color: rgba(180, 180, 180, 0.2);\r\n\r\n  &.onFocus::after {\r\n    height: 4px;\r\n    background-color: #3e8989;\r\n  }\r\n\r\n  &.onFocus {\r\n    background-color: rgba(180, 180, 180, 0.25);\r\n  }\r\n\r\n  &.error::after {\r\n    height: 4px;\r\n    background-color: #e53935;\r\n  }\r\n\r\n  &.disable::after {\r\n    height: 4px;\r\n    background-color: #e0e0e0;\r\n  }\r\n\r\n  .input-text {\r\n    width: 100%;\r\n    height: 100%;\r\n    outline: none;\r\n    background-color: transparent;\r\n    border: 2px solid transparent;\r\n    z-index: 10;\r\n  }\r\n\r\n  .input-label {\r\n    position: absolute;\r\n\r\n    &.onFocus {\r\n      animation: goUp 0.2s linear forwards;\r\n    }\r\n\r\n    &.offFocus {\r\n      animation: goDown 0.2s linear forwards;\r\n    }\r\n\r\n    &.disable {\r\n      animation: goUp 0.2s linear forwards;\r\n    }\r\n  }\r\n\r\n  .icon {\r\n    width: 32px;\r\n    height: auto;\r\n\r\n    &.arrow {\r\n      transform: rotate(90deg) scale(0.4);\r\n    }\r\n  }\r\n}\r\n\r\n.alert {\r\n  font-size: 12px;\r\n  margin: 5px 0 0 8px;\r\n\r\n  &.error {\r\n    color: #e53935;\r\n  }\r\n}\r\n\r\n.icon-container {\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.icon-container img {\r\n  width: 60%;\r\n  height: auto;\r\n  display: block;\r\n}\r\n\r\n@keyframes goUp {\r\n  0% {\r\n    transform: translateX(0);\r\n  }\r\n  100% {\r\n    transform: translateX(calc(-100% - 15px));\r\n  }\r\n}\r\n\r\n@keyframes goDown {\r\n  0% {\r\n    transform: translateX(calc(-100% - 15px));\r\n  }\r\n  100% {\r\n    transform: translateX(0);\r\n  }\r\n}\r\n",
                    "styleUrl": "./input-alter.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"input-container\">\r\n  <div\r\n    class=\"input-text-container\"\r\n    [ngClass]=\"{\r\n      onFocus: isFocused,\r\n      offFocus: !isFocused,\r\n      error: hasError && !disabled && !value,\r\n      disable: disabled\r\n    }\"\r\n    [ngStyle]=\"{ width: width ? width + 'px' : '100%' }\"\r\n  >\r\n    @if(placeholder) {\r\n    <label\r\n      [ngClass]=\"{\r\n        onFocus: isFocused || (!!value && isFocused !== undefined),\r\n        offFocus: !(isFocused || !!value) && isFocused !== undefined,\r\n        disable: disabled\r\n      }\"\r\n      class=\"input-label\"\r\n      >{{ placeholder }}</label\r\n    >\r\n    }\r\n    <input\r\n      class=\"input-text\"\r\n      [value]=\"value\"\r\n      [disabled]=\"disabled\"\r\n      (input)=\"onInputChange($event)\"\r\n      (focus)=\"setFocus()\"\r\n      (blur)=\"setFocus()\"\r\n    />\r\n    @if(icon){\r\n    <div class=\"icon-container\">\r\n      <img [src]=\"icon.src\" [alt]=\"icon.alt\" />\r\n    </div>\r\n    }\r\n  </div>\r\n\r\n  @if(hasError && !disabled && !value) {\r\n  <span class=\"alert error\">{{ hasError }}</span>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-00672cd81e0efcb84626cfba796c86ee1c12c24dcb8c406db22bb2838159c0ece2cf300a48a65915b86a71b234a5dd8eaf3e49a20db6e86f690c2c207a409ca7",
            "file": "projects/relative/src/lib/components/inputs/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "rlv-input",
            "styleUrls": [
                "./input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "\"text\" | \"password\" | \"email\"",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sufixSelected",
                    "defaultValue": "new EventEmitter<suffixes>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter<suffixes>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isFocused",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "isSelectOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnChangeFn<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnTouchFn",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "originalType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "selectedText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"@gmail.com\" | \"@hotmail.com\" | \"@outlook.com\" | \"other\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCloseSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "OnChangeFn<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "OnChangeFn<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectInput",
                    "args": [
                        {
                            "name": "input",
                            "type": "\"@gmail.com\" | \"@hotmail.com\" | \"@outlook.com\" | \"other\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "\"@gmail.com\" | \"@hotmail.com\" | \"@outlook.com\" | \"other\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setOriginalType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "viewPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\ntype suffixes = '@gmail.com' | '@hotmail.com' | '@outlook.com' | '';\r\n\r\n@Component({\r\n  selector: 'rlv-input',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.css'],\r\n})\r\nexport class InputComponent implements OnInit, ControlValueAccessor {\r\n  @Input() required: boolean = false;\r\n  @Input() placeholder: string = '';\r\n  @Input() value: string = '';\r\n  @Input() type: 'text' | 'password' | 'email';\r\n  @Input() disabled: boolean = false;\r\n  @Input() hasError: string;\r\n  @Output() sufixSelected: EventEmitter<suffixes> =\r\n    new EventEmitter<suffixes>();\r\n  @Output() valueChange: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  selectedText: '@gmail.com' | '@hotmail.com' | '@outlook.com' | 'other';\r\n\r\n  isFocused: boolean;\r\n  onTouched: OnTouchFn = () => {};\r\n  onChange: OnChangeFn<string> = () => {};\r\n\r\n  originalType: string;\r\n  isSelectOpen: boolean = false;\r\n\r\n  writeValue(value: string | null): void {\r\n    this.value = value || ''; // Si es null, se establece como una cadena vacía\r\n  }\r\n  registerOnChange(fn: OnChangeFn<string>): void {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setOriginalType();\r\n    this.selectInput('@gmail.com');\r\n  }\r\n\r\n  setFocus(): void {\r\n    this.isFocused = !this.isFocused;\r\n  }\r\n\r\n  openCloseSelect(): void {\r\n    if (this.disabled) return;\r\n    this.isSelectOpen = !this.isSelectOpen;\r\n  }\r\n\r\n  setOriginalType(): void {\r\n    this.originalType = this.type;\r\n  }\r\n\r\n  viewPassword(): void {\r\n    if (this.disabled) return;\r\n    this.type = this.type === 'password' ? 'text' : 'password';\r\n  }\r\n\r\n  selectInput(\r\n    input: '@gmail.com' | '@hotmail.com' | '@outlook.com' | 'other'\r\n  ): void {\r\n    this.selectedText = input;\r\n\r\n    if (this.selectedText === 'other') {\r\n      this.sufixSelected.emit('');\r\n      return;\r\n    }\r\n\r\n    this.sufixSelected.emit(this.selectedText);\r\n  }\r\n\r\n  onInputChange(event?: Event): void {\r\n    if (event) {\r\n      const inputElement = event.target as HTMLInputElement;\r\n      this.value = inputElement.value;\r\n    }\r\n\r\n    this.onChange(this.value); // Notifica al FormControl del cambio\r\n    this.valueChange.emit(this.value); // Emite el cambio hacia afuera\r\n  }\r\n}\r\n\r\ntype OnChangeFn<T> = (value: T) => void;\r\ntype OnTouchFn = () => void;\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"projects/relative/src/assets/base.css\";\r\n\r\n.input-text-container {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 400px;\r\n  min-width: 400px;\r\n  height: 50px;\r\n  padding: 0 0 0 8px;\r\n  margin-top: 30px;\r\n  border-radius: 8px 8px 0 0;\r\n  background-color: rgba(180, 180, 180, 0.2);\r\n\r\n  &::after {\r\n    content: \"\";\r\n    align-self: center;\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 2px;\r\n    background-color: #3e8989;\r\n    transition: all 0.2s ease;\r\n  }\r\n\r\n  &.onFocus::after {\r\n    height: 4px;\r\n    background-color: #3e8989;\r\n  }\r\n\r\n  &.onFocus {\r\n    background-color: rgba(180, 180, 180, 0.25);\r\n  }\r\n\r\n  &.error::after {\r\n    height: 4px;\r\n    background-color: #e53935;\r\n  }\r\n\r\n  &.disable::after {\r\n    height: 4px;\r\n    background-color: #e0e0e0;\r\n  }\r\n\r\n  .input-text {\r\n    width: 100%;\r\n    height: 100%;\r\n    outline: none;\r\n    background-color: transparent;\r\n    border: 2px solid transparent;\r\n    z-index: 10;\r\n  }\r\n\r\n  .input-label {\r\n    position: absolute;\r\n\r\n    &.onFocus {\r\n      animation: goUp 0.2s linear forwards;\r\n    }\r\n\r\n    &.offFocus {\r\n      animation: goDown 0.2s linear forwards;\r\n    }\r\n\r\n    &.disable {\r\n      animation: goUp 0.2s linear forwards;\r\n    }\r\n  }\r\n\r\n  .eye-icon {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 32px;\r\n    height: 32px;\r\n    margin-right: 10px;\r\n  }\r\n\r\n  .email-select {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 4px;\r\n    position: relative;\r\n    height: 100%;\r\n    width: 180px;\r\n    padding: 0 2px 0 0;\r\n\r\n    .selected {\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n\r\n    .inner-select {\r\n      position: absolute;\r\n      display: flex;\r\n      flex-direction: column;\r\n      top: 50px;\r\n      width: 100%;\r\n      background-color: rgba(180, 180, 180, 0.2);\r\n      border-radius: 0 0 8px 8px;\r\n      z-index: 9999;\r\n\r\n      span {\r\n        padding: 4px 0 4px 8px;\r\n\r\n        &:hover {\r\n          background-color: rgba(180, 180, 180, 0.25);\r\n          border-radius: 8px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .selected {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n  }\r\n\r\n  .icon {\r\n    width: 32px;\r\n    height: auto;\r\n\r\n    &.arrow {\r\n      transform: rotate(90deg) scale(0.4);\r\n    }\r\n  }\r\n}\r\n\r\n.alert {\r\n  font-size: 12px;\r\n  margin: 5px 0 0 8px;\r\n\r\n  &.error {\r\n    color: #e53935;\r\n  }\r\n}\r\n\r\n@keyframes goUp {\r\n  0% {\r\n    transform: translate(0);\r\n    font-size: 16px;\r\n  }\r\n  100% {\r\n    transform: translate(-8px, -40px);\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n@keyframes goDown {\r\n  0% {\r\n    transform: translate(-8px, -40px);\r\n    font-size: 14px;\r\n  }\r\n  100% {\r\n    transform: translate(0);\r\n    font-size: 16px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./input.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<div\r\n  class=\"input-text-container\"\r\n  [ngClass]=\"{\r\n    onFocus: isFocused,\r\n    offFocus: !isFocused,\r\n    error: hasError && !disabled && !value,\r\n    disable: disabled\r\n  }\"\r\n>\r\n  @if(placeholder) {\r\n  <label\r\n    [ngClass]=\"{\r\n      onFocus: isFocused || (!!value && isFocused !== undefined),\r\n      offFocus: !(isFocused || !!value) && isFocused !== undefined,\r\n      disable: disabled\r\n    }\"\r\n    class=\"input-label\"\r\n    >{{ placeholder }}{{ required ? \"*\" : \"\" }}</label\r\n  >\r\n  }\r\n  <input\r\n    class=\"input-text\"\r\n    [type]=\"type\"\r\n    [value]=\"value\"\r\n    [disabled]=\"disabled\"\r\n    (input)=\"onInputChange($event)\"\r\n    (focus)=\"setFocus()\"\r\n    (blur)=\"setFocus()\"\r\n    [required]=\"required\"\r\n  />\r\n\r\n  @if(originalType === 'password') {\r\n  <div\r\n    (click)=\"viewPassword()\"\r\n    class=\"eye-icon\"\r\n    [ngStyle]=\"{ cursor: disabled ? 'not-allowed' : 'pointer' }\"\r\n  >\r\n    <img\r\n      class=\"icon\"\r\n      [src]=\"\r\n        type === 'password'\r\n          ? './assets/icons/close.svg'\r\n          : './assets/icons/view.svg'\r\n      \"\r\n    />\r\n  </div>\r\n  } @if(type === 'email' && selectedText !== 'other') {\r\n  <div\r\n    (click)=\"openCloseSelect()\"\r\n    (blur)=\"openCloseSelect()\"\r\n    class=\"email-select\"\r\n    [ngStyle]=\"{ cursor: disabled ? 'not-allowed' : 'pointer' }\"\r\n  >\r\n    <span class=\"selected\">{{ selectedText }}</span>\r\n    @if(isSelectOpen) {\r\n    <div class=\"inner-select\">\r\n      <span (click)=\"selectInput('&#64;gmail.com')\">&#64;gmail.com</span>\r\n      <span (click)=\"selectInput('&#64;hotmail.com')\">&#64;hotmail.com</span>\r\n      <span (click)=\"selectInput('&#64;outlook.com')\">&#64;outlook.com</span>\r\n      <span (click)=\"selectInput('other')\">Otros</span>\r\n    </div>\r\n\r\n    }\r\n    <img class=\"icon arrow\" src=\"assets/icons/arrow.svg\" />\r\n  </div>\r\n  }\r\n</div>\r\n@if(hasError && !disabled && !value) {\r\n<span class=\"alert error\">{{ hasError }}</span>\r\n}\r\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-c76346d04ccc2c7c281287c2733ed409069e79800ecc3e45fa058c0502dde986787d410fd629224bc700048fddae265d051d34d1d3d4c4438bae6b92feb4255e",
            "file": "src/stories/components/forms/login-form/login-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rlv-login-form",
            "styleUrls": [
                "./login-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sufixSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "suffixes",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "control",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSuffixEmail",
                    "args": [
                        {
                            "name": "event",
                            "type": "suffixes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "suffixes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "CTAButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { CTAButtonComponent, InputComponent } from '@relative/public-api';\r\n\r\ntype suffixes = '@gmail.com' | '@hotmail.com' | '@outlook.com' | '';\r\n\r\n//TODO: tengo que documentar todo lo que hay que hacer para que los inputs esten integrados con el reactiveForms de angular\r\n\r\n@Component({\r\n  selector: 'rlv-login-form',\r\n  standalone: true,\r\n  imports: [InputComponent, CTAButtonComponent, ReactiveFormsModule],\r\n  templateUrl: './login-form.component.html',\r\n  styleUrls: ['./login-form.component.css'],\r\n})\r\nexport class LoginFormComponent {\r\n  form: FormGroup;\r\n  loading: boolean = false;\r\n\r\n  sufixSelected: suffixes;\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.fb.group({\r\n      name: [null, Validators.required],\r\n      email: [null, [Validators.required]],\r\n      password: [null, Validators.required],\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.loading = true;\r\n    setTimeout(() => {\r\n      this.loading = false;\r\n    }, 500);\r\n\r\n    this.form.markAllAsTouched();\r\n\r\n    console.log(this.form.value);\r\n    if (this.form.valid) {\r\n      if (this.sufixSelected) {\r\n        this.getFormControl('email').setValue(\r\n          this.getFormControl('email').value + this.sufixSelected\r\n        );\r\n      }\r\n      this.getFormControl('name').disable();\r\n      this.getFormControl('email').disable();\r\n      this.getFormControl('password').disable();\r\n      console.log(this.form.value);\r\n    } else {\r\n      console.log('Formulario no válido');\r\n    }\r\n  }\r\n\r\n  getFormControl(value: string) {\r\n    return this.form.get(value) as FormControl;\r\n  }\r\n\r\n  resetForm() {\r\n    this.form.reset();\r\n  }\r\n\r\n  getSuffixEmail(event: suffixes) {\r\n    this.sufixSelected = event;\r\n  }\r\n\r\n  getError(control: string): string {\r\n    if (\r\n      this.getFormControl(control).hasError('required') &&\r\n      this.getFormControl(control).touched\r\n    ) {\r\n      return 'Este campo es requerido';\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 30px;\r\n  height: 800px;\r\n}\r\n\r\n.button-container {\r\n  display: flex;\r\n  justify-content: end;\r\n  gap: 10px;\r\n  width: 100%;\r\n  margin-top: 30px;\r\n}\r\n",
                    "styleUrl": "./login-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"form-container\">\r\n  <form [formGroup]=\"form\">\r\n    <rlv-input\r\n      formControlName=\"name\"\r\n      [placeholder]=\"'Nombre'\"\r\n      [value]=\"getFormControl('name').value\"\r\n      [type]=\"'text'\"\r\n      [required]=\"true\"\r\n      [hasError]=\"getError('name')\"\r\n    ></rlv-input>\r\n    <rlv-input\r\n      formControlName=\"email\"\r\n      [placeholder]=\"'Correo Electrónico'\"\r\n      [value]=\"getFormControl('email').value\"\r\n      [type]=\"'email'\"\r\n      [required]=\"true\"\r\n      [hasError]=\"getError('email')\"\r\n      (sufixSelected)=\"getSuffixEmail($event)\"\r\n    ></rlv-input>\r\n    <rlv-input\r\n      formControlName=\"password\"\r\n      [placeholder]=\"'Contraseña'\"\r\n      [value]=\"getFormControl('password').value\"\r\n      [type]=\"'password'\"\r\n      [hasError]=\"getError('password')\"\r\n      [required]=\"true\"\r\n    ></rlv-input>\r\n    <div class=\"button-container\">\r\n      <rlv-cta-button\r\n        class=\"reset-button\"\r\n        type=\"button\"\r\n        [type]=\"'raw'\"\r\n        [size]=\"'medium'\"\r\n        [label]=\"'Reset'\"\r\n        (click)=\"resetForm()\"\r\n      ></rlv-cta-button>\r\n      <rlv-cta-button\r\n        class=\"submit-button\"\r\n        type=\"submit\"\r\n        [type]=\"'primary'\"\r\n        [size]=\"'medium'\"\r\n        [label]=\"'Enviar'\"\r\n        [loading]=\"loading\"\r\n        (click)=\"onSubmit()\"\r\n      ></rlv-cta-button>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-31fc45b2a35ee6a5b80dc65149d350f94a5c7048b6c6a90de3eae02f1c1ace35e7f4ed52f5f62248d4cee046addfa158997635d22c0219ef3d6f4fc0eb7a2d8c",
            "file": "projects/relative/src/lib/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rlv-modal",
            "styleUrls": [
                "./modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dynamicComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ModalOptions",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "containerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dynamicContainer', {read: ViewContainerRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadDynamicComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  Component,\r\n  Output,\r\n  EventEmitter, Input,\r\n  AfterViewInit,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ComponentRef\r\n} from '@angular/core';\r\nimport { ModalOptions } from './interfaces/modal-options.interface';\r\n\r\n@Component({\r\n  selector: 'rlv-modal',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './modal.component.html',\r\n  styleUrls: ['./modal.component.css'],\r\n})\r\nexport class ModalComponent implements AfterViewInit{\r\n  @Input() options: ModalOptions = {}; // Un único input con opciones\r\n  @Input() dynamicComponent?: any; // Componente dinámico a renderizar\r\n  @Output() close = new EventEmitter<void>();\r\n\r\n  @ViewChild('dynamicContainer', { read: ViewContainerRef }) containerRef!: ViewContainerRef;\r\n  private componentRef?: ComponentRef<any>;\r\n\r\n  constructor() {}\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.dynamicComponent) {\r\n      this.loadDynamicComponent();\r\n    }\r\n  }\r\n\r\n  private loadDynamicComponent(): void {\r\n    if (this.dynamicComponent) {\r\n      this.containerRef.clear();\r\n      this.componentRef = this.containerRef.createComponent(this.dynamicComponent);\r\n    }\r\n  }\r\n\r\n  closeModal(): void {\r\n    this.componentRef?.destroy();\r\n    this.close.emit();\r\n  }\r\n\r\n  get styles(): { [key: string]: string } {\r\n    return {\r\n      width: this.options.width || '500px',\r\n      height: this.options.height || '300px',\r\n      'background-color': this.options.backgroundColor || '#ffffff',\r\n    };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"projects/relative/src/assets/base.css\";\r\n\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-content {\r\n  position: relative;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n",
                    "styleUrl": "./modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 48
                    }
                }
            },
            "templateData": "<div \r\n  class=\"modal-overlay\"\r\n  (click)=\"closeModal()\"\r\n>\r\n  <div \r\n    class=\"modal-content\"\r\n    [ngStyle]=\"styles\"\r\n    (click)=\"$event.stopPropagation()\"\r\n  >\r\n    <ng-content></ng-content>\r\n    <ng-container #dynamicContainer></ng-container>\r\n    <button (click)=\"closeModal()\">Close</button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-dbd2c427f8ea1214244c311bb6bcfce01cb67e3c6f689ac8311fd5b96aa76ec05669ea05e0efb2cfee6a7a062d2fd66a5fb2cdcb0ab0a82521051c023082b172-1",
            "file": "src/stories/components/modal/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal",
            "styleUrls": [
                "./modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "message",
                    "defaultValue": "'¡Hola! Este es un componente dinámico cargado dentro del modal.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  standalone: true,\r\n  templateUrl: './modal.component.html',\r\n  styleUrls: ['./modal.component.css']\r\n})\r\nexport class ModalComponent {\r\n  message = '¡Hola! Este es un componente dinámico cargado dentro del modal.';\r\n\r\n  constructor() {}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  text-align: center;\r\n  padding: 20px;\r\n  border: 2px solid #007bff;\r\n  border-radius: 8px;\r\n  background-color: #e9f5ff;\r\n  color: #007bff;\r\n}\r\n\r\n.container h2 {\r\n  margin: 0;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n}\r\n\r\n.container p {\r\n  margin: 10px 0 0;\r\n  font-size: 16px;\r\n}\r\n",
                    "styleUrl": "./modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ModalComponent-1",
            "templateData": "<div class=\"container\">\r\n  <h2>{{ message }}</h2>\r\n  <p>Puedes personalizar este contenido como desees.</p>\r\n</div>\r\n"
        },
        {
            "name": "PreviewModalComponent",
            "id": "component-PreviewModalComponent-815469ad5ac29f5a0182a20ac2b2d4ee072d382e09ae1eadd9444e1abdbe14516761324e16a22177739ea3fe9c0d08134c87229a6dbda7da67b5088677dbfcb2",
            "file": "src/stories/components/modal/previewModal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-preview-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./previewModal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CTAButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CTAButtonComponent, RLVModalService } from '@relative/public-api';\r\nimport { ModalOptions } from '@relative/public-api';\r\n\r\nimport { ModalComponent } from './components/modal/modal.component';\r\n\r\n@Component({\r\n  selector: 'app-preview-modal',\r\n  standalone: true,\r\n  templateUrl: './previewModal.component.html',\r\n  imports: [CTAButtonComponent],\r\n})\r\nexport class PreviewModalComponent {\r\n  constructor(private modalService: RLVModalService) {}\r\n\r\n  openModal(): void {\r\n    const options: ModalOptions = {\r\n      width: '600px',\r\n      height: '400px',\r\n      backgroundColor: 'lightblue',\r\n    };\r\n\r\n    this.modalService.openModal(ModalComponent, options);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "RLVModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "RLVModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<rlv-cta-button label=\"Abrir\" (click)=\"openModal()\"></rlv-cta-button>\r\n"
        },
        {
            "name": "TypographyComponent",
            "id": "component-TypographyComponent-bce9674e519c18a51e7b3c7f4d5a653ef564a6283bea97e67897af980c5c30f1679794b7ced18c7a5f315b4d1735babbd28bfff9f538654d540e9b1b0d88a79f",
            "file": "src/stories/design-system/typography/typography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rlv-typography",
            "styleUrls": [
                "./typography.css"
            ],
            "styles": [],
            "templateUrl": [
                "./typography.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "fonts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "literal type[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getBackgroundColor",
                    "args": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFontFamily",
                    "args": [
                        {
                            "name": "fontFamily",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fontFamily",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'rlv-typography',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './typography.component.html',\r\n  styleUrls: ['./typography.css'],\r\n})\r\nexport class TypographyComponent {\r\n  @Input() categories: {\r\n    category: string;\r\n    styles: {\r\n      name: string;\r\n      element: string;\r\n      fontFamily: number;\r\n      fontSize: string;\r\n      fontWeight: string;\r\n      lineHeight: string;\r\n      color: string;\r\n      backgroundColor: string;\r\n    }[];\r\n  }[] = [];\r\n\r\n  @Input() fonts: {\r\n    name: string;\r\n    preview: string;\r\n    type: number;\r\n    downloadLink: string;\r\n  }[] = [];\r\n\r\n  getFontFamily(fontFamily: number): string {\r\n    const DEFAULT = 'Inter';\r\n\r\n    const font = this.fonts.find((font) => fontFamily === font.type);\r\n\r\n    if (!font) return DEFAULT;\r\n\r\n    return font.name;\r\n  }\r\n\r\n  getBackgroundColor(type: number): string {\r\n    let color: string;\r\n\r\n    switch (type) {\r\n      case 2:\r\n        color = '#4caf50';\r\n\r\n        break;\r\n\r\n      case 3:\r\n        color = '#e53935';\r\n        break;\r\n\r\n      default:\r\n        color = '#3E8989';\r\n\r\n        break;\r\n    }\r\n\r\n    return color;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".typography-description {\r\n  font-size: 16px;\r\n  margin: 24px 0 24px 0;\r\n}\r\n\r\n.typography-table {\r\n  width: 70%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n\r\n  &.first-table {\r\n    width: 50%;\r\n  }\r\n}\r\n\r\n.typography-table th,\r\n.typography-table td {\r\n  padding: 12px 15px;\r\n  text-align: left;\r\n  color: #333;\r\n}\r\n\r\n.typography-table td {\r\n  height: 50px;\r\n}\r\n\r\n.typography-table th {\r\n  background-color: #f5f5f5;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n  border-bottom: 2px solid #e0e0e0;\r\n}\r\n\r\n.typography-table tr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.typography-table tr:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.typography-row {\r\n  position: relative;\r\n  align-items: center;\r\n}\r\n\r\n.type-square {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 8px;\r\n}\r\n",
                    "styleUrl": "./typography.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h1 class=\"typography-title\">Tipografía del Sistema de Diseño</h1>\r\n<p class=\"typography-description\">\r\n  Aquí se muestran las tres diferente tipografías que se utilizan según la\r\n  utilidad de cada una.\r\n</p>\r\n\r\n<table class=\"typography-table first-table\">\r\n  <thead>\r\n    <tr>\r\n      <th>Nombre</th>\r\n      <th>Vista previa</th>\r\n      <th>Tipo</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    @for (font of fonts; track $index) {\r\n      <tr class=\"typography-row\">\r\n        <td>{{ font.name }}</td>\r\n        <td [ngStyle]=\"{ 'font-family': font.name }\">{{ font.preview }}</td>\r\n        <td>\r\n          <div\r\n            [ngStyle]=\"{ 'background-color': getBackgroundColor(font.type) }\"\r\n            class=\"type-square\"\r\n          ></div>\r\n        </td>\r\n      </tr>\r\n    }\r\n  </tbody>\r\n</table>\r\n\r\n<p class=\"typography-description\">\r\n  A continuación, se muestran las categorías tipográficas definidas para los\r\n  diferentes elementos de HTML, incluyendo tamaños, pesos, alturas de línea y\r\n  colores.\r\n</p>\r\n\r\n@for (category of categories; track $index) {\r\n  <div class=\"typography-category\">\r\n    <h2>{{ category.category }}</h2>\r\n    <table class=\"typography-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Vista previa</th>\r\n          <th>Etiqueta</th>\r\n          <th>Tamaño</th>\r\n          <th>Peso</th>\r\n          <th>Altura de línea</th>\r\n          <th>Color</th>\r\n          <th>Tipo</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        @for (style of category.styles; track $index) {\r\n          <tr class=\"typography-row\">\r\n            <td [ngStyle]=\"{ 'font-family': getFontFamily(style.fontFamily) }\">\r\n              <div\r\n                [ngStyle]=\"{\r\n                  'font-size': style.fontSize,\r\n                  'font-weight': style.fontWeight,\r\n                  'line-height': style.lineHeight,\r\n                  'background-color': style.backgroundColor\r\n                    ? style.backgroundColor\r\n                    : null,\r\n                  'border-radius': style.backgroundColor ? '8px' : null,\r\n                  width: style.backgroundColor ? '60px' : null,\r\n                  'text-align': style.backgroundColor ? 'center' : null,\r\n                  padding: style.backgroundColor ? '8px' : null,\r\n                  color: style.color,\r\n                }\"\r\n              >\r\n                {{ style.name }}\r\n              </div>\r\n            </td>\r\n            <td>{{ style.element }}</td>\r\n            <td>{{ style.fontSize }}</td>\r\n            <td>{{ style.fontWeight }}</td>\r\n            <td>{{ style.lineHeight }}</td>\r\n            <td>\r\n              <span class=\"color-box\" [style.background]=\"style.color\"></span>\r\n              {{ style.color }}\r\n            </td>\r\n            <td>\r\n              <div\r\n                [ngStyle]=\"{\r\n                  'background-color': getBackgroundColor(style.fontFamily),\r\n                }\"\r\n                class=\"type-square\"\r\n              ></div>\r\n            </td>\r\n          </tr>\r\n        }\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n}\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "OnChangeFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "OnTouchFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "suffixes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"@gmail.com\" | \"@hotmail.com\" | \"@outlook.com\" | string",
                "file": "src/stories/components/forms/login-form/login-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "suffixes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"@gmail.com\" | \"@hotmail.com\" | \"@outlook.com\" | string",
                "file": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/relative/src/lib/components/inputs/input/input.component.ts": [
                {
                    "name": "OnChangeFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "OnTouchFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "suffixes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"@gmail.com\" | \"@hotmail.com\" | \"@outlook.com\" | string",
                    "file": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/stories/components/forms/login-form/login-form.component.ts": [
                {
                    "name": "suffixes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"@gmail.com\" | \"@hotmail.com\" | \"@outlook.com\" | string",
                    "file": "src/stories/components/forms/login-form/login-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/relative/src/lib/components/buttons/branded-button/branded-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrandedButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/buttons/cta-button/cta-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CTAButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/card/card.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/inputs/input-alter/input-alter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputAlterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/inputs/input-alter/input-alter.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "OnChangeFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "OnTouchFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/inputs/input/input.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "suffixes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/modal/interfaces/modal-options.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModalOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/directives/clickPressure.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickPressureDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/relative/src/lib/services/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RLVModalService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/forms/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/forms/login-form/login-form.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "suffixes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/modal/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/modal/previewModal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PreviewModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/design-system/color-pallete/color-pallete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPaletteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/design-system/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}