{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ColorPaletteComponent",
            "id": "component-ColorPaletteComponent-5edc25d9eac907f454333d9b31afd664d41014f9ab3ff0acddbe0459b4737242b8d5c9b6f661765503bd006b1cfef6c684380e82e505fb7f63ae57c3543f3527",
            "file": "src/stories/design-system/color-pallete/color-pallete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rlv-color-palette",
            "styleUrls": [
                "./color-pallete.css"
            ],
            "styles": [],
            "templateUrl": [
                "./color-pallete.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "baseColors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "hoverColors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "literal type[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "activeRow",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "copyHex",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showAlert",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'rlv-color-palette',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './color-pallete.component.html',\n  styleUrls: ['./color-pallete.css'],\n})\nexport class ColorPaletteComponent {\n  @Input() baseColors: { name: string; hex: string }[] = [];\n  \n  @Input() hoverColors: { name: string; hex: string }[] = [];\n\n  activeRow: number | null = null;\n  \n  activeColor: string | null = null;\n\n  copyHex(color: string, index: number): void {\n    if(this.activeRow !== null) return\n    navigator.clipboard\n      .writeText(color)\n      .then(() => {\n        this.showAlert(index, color);\n      })\n      .catch((err) => {\n        alert(`Error al copiar al portapapeles: ${err}`);\n      });\n  }\n\n  showAlert(index: number, color: string): void {\n    this.activeRow = index;\n    this.activeColor = color;\n\n    setTimeout(() => {\n      this.activeRow = null;\n    }, 1000);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".color-table {\r\n  justify-self: center;\r\n  width: 60%;\r\n  border-collapse: collapse;\r\n  margin-top: 50px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.color-table th,\r\n.color-table td {\r\n  padding: 12px 15px;\r\n  text-align: left;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n\r\n.color-table td {\r\n  width: 300px;\r\n}\r\n\r\n.color-table th {\r\n  background-color: #f5f5f5;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n  border-bottom: 2px solid #e0e0e0;\r\n}\r\n\r\n.color-table tr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.color-table tr:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.color-row {\r\n  position: relative;\r\n  cursor: pointer;\r\n  align-items: center;\r\n}\r\n\r\n.color-box {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.color-table td {\r\n  font-family: \"Courier New\", Courier, monospace;\r\n  color: #777;\r\n}\r\n\r\n.color-table:last-child {\r\n  margin-bottom: 100px;\r\n}\r\n\r\n.badger-alert{\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: absolute;\r\n  transform: translateX(-14px);\r\n  opacity: 0;\r\n  width: 80px;\r\n  height: 40px;\r\n  color: white;\r\n  border-radius: 12px;\r\n  background-color: #333333;\r\n  margin: 12px 0 0 15px;\r\n  transition: opacity 0.2s, transform 0.2s;\r\n  \r\n  &.show{\r\n    opacity: .4;\r\n    transform: translateX(0px);\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-pallete.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h1>Paleta de Colores</h1>\r\n<p>\r\n  A continuación, se muestran los colores utilizados en el sistema de diseño:\r\n</p>\r\n<h2>Colores Base</h2>\r\n<table class=\"color-table\">\r\n  <thead>\r\n    <tr>\r\n      <th>Nombre</th>\r\n      <th>Color</th>\r\n      <th>Hex</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    @for (color of baseColors; track $index) {\r\n      <tr class=\"color-row\" (click)=\"copyHex(color.hex, $index)\">\r\n        <td>{{ color.name }}</td>\r\n        <td><div [style.background]=\"color.hex\" class=\"color-box\"></div></td>\r\n        <td>{{ color.hex }}</td>\r\n        <div [ngClass]=\"{ show: activeRow === $index && activeColor === color.hex }\" class=\"badger-alert\">Copied!</div>\r\n      </tr>\r\n    }\r\n  </tbody>\r\n</table>\r\n\r\n<h2>Colores Hover</h2>\r\n<table class=\"color-table\">\r\n  <thead>\r\n    <tr>\r\n      <th>Nombre</th>\r\n      <th>Color</th>\r\n      <th>Hex</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    @for (color of hoverColors; track $index) {\r\n      <tr class=\"color-row\" (click)=\"copyHex(color.hex, $index)\">\r\n        <td>{{ color.name }}</td>\r\n        <td><div [style.background]=\"color.hex\" class=\"color-box\"></div></td>\r\n        <td>{{ color.hex }}</td>\r\n        <div [ngClass]=\"{ show: activeRow === $index && activeColor === color.hex}\" class=\"badger-alert\">Copied!</div>\r\n      </tr>\r\n    }\r\n  </tbody>\r\n</table>\r\n"
        },
        {
            "name": "TypographyComponent",
            "id": "component-TypographyComponent-213f9e3b89a63b9290d3230e704a0ff01b91404aa05d9308d5c39ebf2f174d1f32f33e4387e884e6abd813dfd8a1b87d40419a178f1eced9ff44f2cf040df14f",
            "file": "src/stories/design-system/typography/typography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rlv-typography",
            "styleUrls": [
                "./typography.css"
            ],
            "styles": [],
            "templateUrl": [
                "./typography.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "fonts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "literal type[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getBackgroundColor",
                    "args": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFontFamily",
                    "args": [
                        {
                            "name": "fontFamily",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fontFamily",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'rlv-typography',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './typography.component.html',\n  styleUrls: ['./typography.css'],\n})\nexport class TypographyComponent {\n  @Input() categories: {\n    category: string;\n    styles: {\n      name: string;\n      element: string;\n      fontFamily: number;\n      fontSize: string;\n      fontWeight: string;\n      lineHeight: string;\n      color: string;\n      backgroundColor: string;\n    }[];\n  }[] = [];\n\n  @Input() fonts: {\n    name: string;\n    preview: string;\n    type: number;\n    downloadLink: string;\n  }[] = [];\n\n  getFontFamily(fontFamily: number): string {\n    const DEFAULT = 'Inter';\n\n    const font = this.fonts.find((font) => fontFamily === font.type);\n\n    if (!font) return DEFAULT;\n\n    return font.name;\n  }\n\n  getBackgroundColor(type: number): string {\n    let color: string;\n\n    switch (type) {\n      case 2:\n        color = '#4caf50';\n\n        break;\n\n      case 3:\n        color = '#e53935';\n        break;\n\n      default:\n        color = '#3E8989';\n\n        break;\n    }\n\n    return color;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".typography-title {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin: 16px 0 16px 0;\r\n}\r\n\r\n.typography-description {\r\n  font-size: 16px;\r\n  margin: 24px 0 24px 0;\r\n}\r\n\r\n.typography-table {\r\n  width: 70%;\r\n  border-collapse: collapse;\r\n  margin-top: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n\r\n  &.first-table {\r\n    width: 50%;\r\n  }\r\n}\r\n\r\n.typography-table th,\r\n.typography-table td {\r\n  padding: 12px 15px;\r\n  text-align: left;\r\n  color: #333;\r\n}\r\n\r\n.typography-table td {\r\n  height: 50px;\r\n}\r\n\r\n.typography-table th {\r\n  background-color: #f5f5f5;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n  border-bottom: 2px solid #e0e0e0;\r\n}\r\n\r\n.typography-table tr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.typography-table tr:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.typography-row {\r\n  position: relative;\r\n  align-items: center;\r\n}\r\n\r\n.type-square {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 8px;\r\n}\r\n",
                    "styleUrl": "./typography.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h1 class=\"typography-title\">Tipografía del Sistema de Diseño</h1>\r\n<p class=\"typography-description\">\r\n  Aquí se muestran las tres diferente tipografías que se utilizan según la\r\n  utilidad de cada una.\r\n</p>\r\n\r\n<table class=\"typography-table first-table\">\r\n  <thead>\r\n    <tr>\r\n      <th>Nombre</th>\r\n      <th>Vista previa</th>\r\n      <th>Tipo</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    @for (font of fonts; track $index) {\r\n      <tr class=\"typography-row\">\r\n        <td>{{ font.name }}</td>\r\n        <td [ngStyle]=\"{ 'font-family': font.name }\">{{ font.preview }}</td>\r\n        <td>\r\n          <div\r\n            [ngStyle]=\"{ 'background-color': getBackgroundColor(font.type) }\"\r\n            class=\"type-square\"\r\n          ></div>\r\n        </td>\r\n      </tr>\r\n    }\r\n  </tbody>\r\n</table>\r\n\r\n<p class=\"typography-description\">\r\n  A continuación, se muestran las categorías tipográficas definidas para los\r\n  diferentes elementos de HTML, incluyendo tamaños, pesos, alturas de línea y\r\n  colores.\r\n</p>\r\n\r\n@for (category of categories; track $index) {\r\n  <div class=\"typography-category\">\r\n    <h2>{{ category.category }}</h2>\r\n    <table class=\"typography-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Vista previa</th>\r\n          <th>Etiqueta</th>\r\n          <th>Tamaño</th>\r\n          <th>Peso</th>\r\n          <th>Altura de línea</th>\r\n          <th>Color</th>\r\n          <th>Tipo</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        @for (style of category.styles; track $index) {\r\n          <tr class=\"typography-row\">\r\n            <td [ngStyle]=\"{ 'font-family': getFontFamily(style.fontFamily) }\">\r\n              <div\r\n                [ngStyle]=\"{\r\n                  'font-size': style.fontSize,\r\n                  'font-weight': style.fontWeight,\r\n                  'line-height': style.lineHeight,\r\n                  'background-color': style.backgroundColor\r\n                    ? style.backgroundColor\r\n                    : null,\r\n                  'border-radius': style.backgroundColor ? '8px' : null,\r\n                  width: style.backgroundColor ? '60px' : null,\r\n                  'text-align': style.backgroundColor ? 'center' : null,\r\n                  padding: style.backgroundColor ? '8px' : null,\r\n                  color: style.color,\r\n                }\"\r\n              >\r\n                {{ style.name }}\r\n              </div>\r\n            </td>\r\n            <td>{{ style.element }}</td>\r\n            <td>{{ style.fontSize }}</td>\r\n            <td>{{ style.fontWeight }}</td>\r\n            <td>{{ style.lineHeight }}</td>\r\n            <td>\r\n              <span class=\"color-box\" [style.background]=\"style.color\"></span>\r\n              {{ style.color }}\r\n            </td>\r\n            <td>\r\n              <div\r\n                [ngStyle]=\"{\r\n                  'background-color': getBackgroundColor(style.fontFamily),\r\n                }\"\r\n                class=\"type-square\"\r\n              ></div>\r\n            </td>\r\n          </tr>\r\n        }\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n}\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/design-system/color-pallete/color-pallete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPaletteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/design-system/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}